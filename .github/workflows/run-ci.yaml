name: Test Helm Chart
run-name: ${{ inputs.helm_chart_name }} Chart (ref ${{ github.ref }})

on:
  push:
    tags:
      - '*-v*'
    branches-ignore:
      - 'release-please--branches--main--components--*'
    paths:
      - 'tests/**'
      - ske-operator/**
      - ske-gui/**
      - backstage-controller/**
  workflow_dispatch:
    inputs:
      ssh_session:
        type: boolean
        description: "Debugging with tmate"
        default: false
      helm_chart_name:
        type: choice
        options:
          - ske-operator
          - ske-gui
          - backstage-controller
          - k8s-health-agent
        description: "Target helm chart"
        required: true
      merge_release_pr:
        type: boolean
        description: "Release on success?"
        default: false
      update_chart_app:
        type: boolean
        description: "Update chart appVersion"
        default: false
      chart_tag:
        type: string
        description: "Tag to Release (optional)"
        required: false

jobs:
  test:
    if: ${{ !startsWith(github.ref, 'refs/tags/') && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && inputs.chart_tag == '' }}
    runs-on: ubuntu-latest
    env:
      GITHUB_EVENT_NAME: ${{ github.event_name }}
      GITHUB_REF: ${{ github.ref }}
      CHART_NAME: ${{ inputs.helm_chart_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CR_TOKEN }}

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            ske-operator:
              - 'ske-operator/**'
              - 'tests/**'

      - name: Set up kubectl
        if: ${{ steps.changes.outputs.ske-operator == 'true' || inputs.helm_chart_name == 'ske-operator' }}
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set up Helm
        if: ${{ steps.changes.outputs.ske-operator == 'true' || inputs.helm_chart_name == 'ske-operator' }}
        uses: azure/setup-helm@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        if: ${{ steps.changes.outputs.ske-operator == 'true' || inputs.helm_chart_name == 'ske-operator' }}
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Set up Kind
        if: ${{ steps.changes.outputs.ske-operator == 'true' || inputs.helm_chart_name == 'ske-operator' }}
        uses: helm/kind-action@v1
        with:
          version: 'v0.20.0'
          cluster_name: "platform"

      - name: Install Ginkgo CLI
        if: ${{ steps.changes.outputs.ske-operator == 'true' || inputs.helm_chart_name == 'ske-operator' }}
        run: |
          go install github.com/onsi/ginkgo/v2/ginkgo@latest
        env:
          PATH: ${{ env.PATH }}:/home/runner/go/bin

      - name: Start tmate ssh debugging session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.ssh_session }}
        with:
          limit-access-to-actor: true
          detached: true

      - name: Run Tests
        if: ${{ steps.changes.outputs.ske-operator == 'true' || inputs.helm_chart_name == 'ske-operator' }}
        run: |
          ginkgo -r tests/
        env:
          GH_TOKEN: ${{ secrets.CR_TOKEN }}
          SKE_LICENSE_TOKEN: ${{ secrets.SKE_LICENSE_TOKEN }}
          RUN_TESTS: true

  update-and-release:
    if: ${{ !startsWith(github.ref, 'refs/tags/') && (needs.test.result == 'success' || needs.test.result == 'skipped') }}
    runs-on: ubuntu-latest
    needs: [test]
    env:
      GITHUB_EVENT_NAME: ${{ github.event_name }}
      GITHUB_REF: ${{ github.ref }}
      CHART_NAME: ${{ inputs.helm_chart_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CR_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "syntassodev"
          git config user.email "kratix@syntasso.io"

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            ske-operator:
              - 'ske-operator/**'
              - 'tests/**'
            ske-gui:
              - 'ske-gui/**'
            kratix:
              - 'kratix/**'
            backstage-controller:
              - 'backstage-controller/**'
            k8s-health-agent:
              - 'k8s-health-agent/**'

      - name: Set chart change flags
        run: |
          echo "SKE_OPERATOR_CHANGED=${{ steps.changes.outputs.ske-operator }}" >> $GITHUB_ENV
          echo "SKE_GUI_CHANGED=${{ steps.changes.outputs.ske-gui }}" >> $GITHUB_ENV
          echo "KRATIX_CHANGED=${{ steps.changes.outputs.kratix }}" >> $GITHUB_ENV
          echo "BACKSTAGE_CONTROLLER_CHANGED=${{ steps.changes.outputs.backstage-controller }}" >> $GITHUB_ENV
          echo "K8S_HEALTH_AGENT_CHANGED=${{ steps.changes.outputs.k8s-health-agent }}" >> $GITHUB_ENV

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install release-please
        run: npm install -g release-please

      - name: Create pending releases
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          TOKEN: ${{ secrets.RELEASE_PLEASE_TOKEN }}
        run: |
          if [ -z "${CHART_NAME}" ]; then
            # get all charts from release-please-manifest.json
            charts=$(cat .release-please-manifest.json | jq -r 'keys[]')
            for chart in $charts; do
              release-please \
                --token=$TOKEN \
                --repo-url=syntasso/helm-charts \
                --path ${chart} \
                github-release
            done
          else
            release-please \
              --token=$TOKEN \
              --repo-url=syntasso/helm-charts \
              --path ${CHART_NAME} \
              github-release
          fi

      - name: Update Release PR
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          TOKEN: ${{ secrets.RELEASE_PLEASE_TOKEN }}
        run: |
          if [ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ] && [ -n "${CHART_NAME}" ]; then
            # For manual dispatch, use the provided chart name
            echo "Updating release PR for manually specified chart: ${CHART_NAME}"
            release-please \
              --token=$TOKEN \
              --repo-url=syntasso/helm-charts \
              --path ${CHART_NAME} \
              release-pr
          else
            # For push events, check which charts were affected by changes
            affected_charts=()

            # Define chart mappings: env_var_name -> chart_name
            declare -A chart_mappings=(
              ["SKE_OPERATOR_CHANGED"]="ske-operator"
              ["SKE_GUI_CHANGED"]="ske-gui"
              ["KRATIX_CHANGED"]="kratix"
              ["BACKSTAGE_CONTROLLER_CHANGED"]="backstage-controller"
              ["K8S_HEALTH_AGENT_CHANGED"]="k8s-health-agent"
            )

            # Check each chart using environment variables
            for env_var in "${!chart_mappings[@]}"; do
              if [ "${!env_var}" == "true" ]; then
                affected_charts+=("${chart_mappings[$env_var]}")
              fi
            done

            # If no charts were affected, exit
            if [ ${#affected_charts[@]} -eq 0 ]; then
              echo "No charts were affected by changes, skipping update release PR..."
              exit 0
            fi

            # Echo all affected charts at once
            echo "Charts affected by changes: ${affected_charts[*]}"

            # Update release PR for each affected chart
            for chart in "${affected_charts[@]}"; do
              echo "Updating release PR for $chart..."
              release-please \
                --token=$TOKEN \
                --repo-url=syntasso/helm-charts \
                --path ${chart} \
                release-pr
            done
          fi

      - name: Update appVersion
        if: ${{ github.ref == 'refs/heads/main' && inputs.update_chart_app }}
        env:
          TOKEN: ${{ secrets.RELEASE_PLEASE_TOKEN }}
          GH_TOKEN: ${{ secrets.CR_TOKEN }}
          SKE_LICENSE_TOKEN: ${{ secrets.SKE_LICENSE_TOKEN }}
        run: |
          if [ -z "${CHART_NAME}" ]; then
            echo "No chart name provided, skipping update appVersion..."
            exit 0
          fi

          echo "Looking for update script in scripts/update-${CHART_NAME}..."
          if [ -f ./scripts/update-${CHART_NAME} ]; then
            ./scripts/update-${CHART_NAME}
          else
            echo "No update script found for ${CHART_NAME}"
            exit 1
          fi

          git add .

          message="feat(${CHART_NAME}): update appVersion"
          if [ "${{ inputs.merge_release_pr }}" == "true" ]; then
            message=$(echo "${message} (autorelease)")
          fi

          git commit -m "${message}"
          git push origin main

      - name: Merge Release PR
        if: ${{ !inputs.update_chart_app }}
        env:
          GH_TOKEN: ${{ secrets.CR_TOKEN }}
        run: |
          if [ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]; then
            if [ -z "${CHART_NAME}" ]; then
              echo "No chart name provided for workflow dispatch, skipping merge release PR..."
              exit 0
            fi
            target_chart="${CHART_NAME}"
          else
            commit_message=$(git log -1 --pretty=%B)
            echo "Latest commit message: ${commit_message}"

            if echo "${commit_message}" | grep -q "feat("; then
              target_chart=$(echo "${commit_message}" | sed -n 's/.*feat(\([^)]*\)):.*/\1/p')
              echo "Extracted chart name from commit: ${target_chart}"
            else
              echo "No chart name found in commit message, skipping merge release PR..."
              exit 0
            fi
          fi

          if git log -1 --pretty=%B | grep -q "autorelease"; then
            echo "Latest commit has autorelease in the message, merging release PR for ${target_chart}"
            gh pr merge --admin --merge release-please--branches--main--components--${target_chart}
          else
            echo "Latest commit does not have autorelease in the message, skipping merge"
          fi

  publish-charts:
    if: ${{ startsWith(github.ref, 'refs/tags/') || inputs.chart_tag != '' }}
    runs-on: ubuntu-latest
    env:
      GITHUB_EVENT_NAME: ${{ github.event_name }}
      GITHUB_REF: ${{ github.ref }}
      GITHUB_REF_NAME: ${{ github.ref_name }}
      CHART_TAG: ${{ inputs.chart_tag }}
      CR_TOKEN: ${{ secrets.CR_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CR_TOKEN }}

      - name: Determine Chart to release
        run: |
          if [ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]; then
            if [ -z "${CHART_TAG}" ]; then
              echo "ERROR: chart_tag input is required for workflow_dispatch"
              exit 1
            fi
            echo "Using provided chart_tag: ${CHART_TAG}"
            echo "CHART_NAME=$(echo ${CHART_TAG} | awk -F'-v' '{ print $1 }')" >> $GITHUB_ENV
            echo "CHART_VERSION=v$(echo ${CHART_TAG} | awk -F'-v' '{ print $2 }')" >> $GITHUB_ENV
          else
            echo "Using git ref name: ${GITHUB_REF_NAME}"
            echo "CHART_NAME=$(echo ${GITHUB_REF_NAME} | awk -F'-v' '{ print $1 }')" >> $GITHUB_ENV
            echo "CHART_VERSION=v$(echo ${GITHUB_REF_NAME} | awk -F'-v' '{ print $2 }')" >> $GITHUB_ENV
          fi

      - name: Configure Git
        run: |
          git config user.name "syntassodev"
          git config user.email "kratix@syntasso.io"

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        with:
          charts_dir: ${CHART_NAME}
          pages_branch: gh-pages
          skip_existing: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Upload Charts to Releases Bucket
        run: |
          VERSION=$(grep '^version:' ${CHART_NAME}/Chart.yaml | awk '{print $2}' | head -n 1)
          bucket_path="s3://syntasso-enterprise-releases/${CHART_NAME}-helm-chart/${VERSION}/"
          echo "Uploading ${CHART_NAME}-${VERSION}.tgz to ${bucket_path}"
          aws s3 cp .cr-release-packages/${CHART_NAME}-${VERSION}.tgz ${bucket_path}