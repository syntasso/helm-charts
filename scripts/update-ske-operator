#!/usr/bin/env bash

set -euxo pipefail

function generate_resources_without_certmanager(){
  CHART_CRDS_WITHOUT_CERT_MANAGER=$root/ske-operator/charts/ske-operator-crds/templates/crds-without-cert-manager.yaml
  CHART_DIST_WITHOUT_CERT_MANAGER=$root/ske-operator/templates/without-cert-manager.yaml

  echo "{{ if .Values.global.skeOperator.tlsConfig.certManagerConfig.disabled }}" > "${CHART_DIST_WITHOUT_CERT_MANAGER}"
  yq 'select(.kind == "ValidatingWebhookConfiguration")' ${MANIFEST_NAME} |
      yq 'del(.metadata.annotations."cert-manager.io/inject-ca-from")' |
      yq '.webhooks[0].clientConfig.caBundle= "{{ .Values.global.skeOperator.tlsConfig.webhookCACert | b64enc }}" | .webhooks[0].clientConfig.caBundle style="literal"' >> "${CHART_DIST_WITHOUT_CERT_MANAGER}"
  cat <<EOF >> "${CHART_DIST_WITHOUT_CERT_MANAGER}"
---
apiVersion: v1
data:
  ca.crt: {{ .Values.global.skeOperator.tlsConfig.webhookCACert | b64enc }}
  tls.crt: {{ .Values.global.skeOperator.tlsConfig.webhookTLSCert | b64enc }}
  tls.key: {{ .Values.global.skeOperator.tlsConfig.webhookTLSKey | b64enc }}
kind: Secret
metadata:
  name: ske-operator-webhook-server-cert
  namespace: kratix-platform-system
type: kubernetes.io/tls

EOF
  echo "{{ end }}" >> "${CHART_DIST_WITHOUT_CERT_MANAGER}"


  echo "{{ if .Values.global.skeOperator.tlsConfig.certManagerConfig.disabled }}" > "${CHART_CRDS_WITHOUT_CERT_MANAGER}"
  yq 'select(.kind == "CustomResourceDefinition")' ${MANIFEST_NAME} |
    yq 'del(.metadata.annotations."cert-manager.io/inject-ca-from")' |
    yq '.spec.conversion.webhook.clientConfig.caBundle= "{{ .Values.global.skeOperator.tlsConfig.webhookCACert | b64enc }}" | .spec.conversion.webhook.clientConfig.caBundle style="literal" '>> "${CHART_CRDS_WITHOUT_CERT_MANAGER}"
  echo "{{ end }}" >> "${CHART_CRDS_WITHOUT_CERT_MANAGER}"
}

function generate_resources_with_certmanager(){
  CHART_CRDS_WITH_CERT_MANAGER=$root/ske-operator/charts/ske-operator-crds/templates/crds-with-cert-manager.yaml
  CHART_DIST_WITH_CERT_MANAGER=$root/ske-operator/templates/with-cert-manager.yaml

  echo "{{ if not .Values.global.skeOperator.tlsConfig.certManagerConfig.disabled }}" > "${CHART_DIST_WITH_CERT_MANAGER}"
  yq 'select(.kind == "Certificate"
    or .kind == "Issuer"
    or .kind == "ValidatingWebhookConfiguration")' ${MANIFEST_NAME} >> "${CHART_DIST_WITH_CERT_MANAGER}"
  echo "{{ end }}" >> "${CHART_DIST_WITH_CERT_MANAGER}"

  echo "{{ if not .Values.global.skeOperator.tlsConfig.certManagerConfig.disabled }}" > "${CHART_CRDS_WITH_CERT_MANAGER}"
  yq 'select(.kind == "CustomResourceDefinition")' ${MANIFEST_NAME} >> "${CHART_CRDS_WITH_CERT_MANAGER}"
  echo "{{ end }}" >> "${CHART_CRDS_WITH_CERT_MANAGER}"

}

function main(){
  MANIFEST_NAME="ske-operator-distribution.yaml"
  root=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )/.." &> /dev/null && pwd )

  # Download the latest release manifest
  latest_release="$(gh release list --repo=syntasso/enterprise-kratix --exclude-pre-releases --order desc --json tagName --jq "[ .[] | select(.tagName | match(\"ske-operator\")) ][0].tagName")"
  if [ -z "$latest_release" ]; then
    echo "No release found for $COMPONENT"
    exit 1
  fi

  gh release download --repo=syntasso/enterprise-kratix "$latest_release" --pattern "${MANIFEST_NAME}"

  # ensure to clean up the downloaded file
  trap "rm ske-operator-distribution.yaml" EXIT

  export latest_version=${latest_release#"ske-operator-"}


  CHART_DIST_COMMON=$root/ske-operator/templates/ske-operator-distribution.yaml
  yq 'select(.kind != "CustomResourceDefinition"
    and .kind != "Namespace"
    and .kind != "Certificate"
    and .kind != "Issuer"
    and .kind != "ValidatingWebhookConfiguration")' ${MANIFEST_NAME} > "${CHART_DIST_COMMON}"
  generate_resources_without_certmanager
  generate_resources_with_certmanager


  # generate the kustomize manifest
  kubectl kustomize $root/ske-operator > $root/ske-operator/manifests.yaml
  mv $root/ske-operator/manifests.yaml "${CHART_DIST_COMMON}"

  # Bump current chart version (always a minor bump)
  current_chart_version="$(yq -r '.version' ske-operator/Chart.yaml)"
  export new_chart_version="$(echo $current_chart_version | awk -F. '{$2 = $2 + 1;} 1' | sed 's/ /./g')"
  yq -i '.appVersion = strenv(latest_version) | .version = env(new_chart_version) | .dependencies[0].version = env(new_chart_version)' ske-operator/Chart.yaml
  yq -i '.appVersion = strenv(latest_version) | .version = env(new_chart_version)' ske-operator/charts/ske-operator-crds/Chart.yaml
}

main
